function defaults = spindlerGetDefaults()
% Returns the defaults for spindle detection
%
% Parameters:
%
%     defaults     a structure with the parameters for the default types
%                  in the form of a structure that has fields
%                     value: default value
%                     classes:   classes that the parameter belongs to
%                     attributes:  attributes of the parameter
%                     description: description of parameter
%

defaults = struct( ...
    'spindlerAtomsPerSecond', ...
    getRules(0.02:0.01:0.4, ... %[0.02:0.01:0.2, 0.25:0.05:0.5], ...  %[0.02:0.005:0.15, 0.2:0.1:0.6]
    {'numeric'}, {'row', 'positive'}, ... 
    'Values of atoms per second to try in searching for optimal parameters.'), ...
    'spindlerBaseFrequencies', ...
    getRules([1, 35], ...
    {'numeric'}, {'row', 'positive'}, ... 
    'Two element-vector with initial filtering limits.'), ...
    'spindlerBaseThresholds', ...
    getRules([0, power(10, -5:1:-2), 0.02:0.01:0.1, 0.2:0.1:1], ...
    {'numeric'}, {'row', 'nonnegative', '<=', 1}, ... 
    'Thresholds to test in determining the spindles.'), ...
    'spindlerGaborFrequencies', ...
    getRules(6:14, ...
    {'numeric'}, {'row', 'positive'}, ... 
    'Frequencies of the atoms in the Gabor dictionary.'), ...
    'spindlerGaborScales', ...
    getRules([0.125, 0.25, 0.5], ...
    {'numeric'}, {'row', 'positive'}, ... 
    'Scales of the atoms (2*SD) in the Gabor dictionary.'), ...
    'spindlerGaborSupportFactor', ...
    getRules(3.0, {'numeric'}, ...
    {'positive', 'scalar'}, ...
    'Padding factor on either side based on maximum atom support.'), ...
    'spindlerLowEligibleCount', ...
    getRules(0.5, {'numeric'}, ...
    {'nonnegative', 'scalar'}, ...
    'Fraction of Ns values in STDRange which have good spindle length distributions.'), ...
    'spindlerLowMinMaxPercentileRatio', ...
    getRules(0.1, {'numeric'}, ...
    {'nonnegative', 'scalar'}, ...
    'Ratio of min/max percentile distances should be greater than this.'), ...
    'spindlerSignalTrimFactor', ...
    getRules(95, ...
    {'numeric'}, {'scalar', 'nonnegative'}, ... 
    'Percentile signal absolute value to use for scaling MP signal'), ...
    'spindlerSTDLimits', ...
    getRules([0.005, 0.1], ...
    {'numeric'}, {'row', 'nonnegative'}, ... 
    'Limits of allowed spindles/sec STD with respect to threshold.') ...
    ); 

end

function s = getRules(value, classes, attributes, description)
% Construct the default structure
s = struct('value', [], 'classes', [], ...
    'attributes', [], 'description', []);
s.value = value;
s.classes = classes;
s.attributes = attributes;
s.description = description;
end