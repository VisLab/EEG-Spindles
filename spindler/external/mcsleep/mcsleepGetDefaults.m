function defaults = mcsleepGetDefaults()
% Returns defaults for the mcsleep spindle detection
%
% Parameters:
%
%     defaults     a structure with the parameters for the default types
%                  in the form of a structure that has fields
%                     value: default value
%                     classes:   classes that the parameter belongs to
%                     attributes:  attributes of the parameter
%                     description: description of parameter
%

%        param - parameters struct. Members are as below
%                lam1 - sparsity of transient component
%                lam2 - sparsity of derivative of transient component
%                lam3 - rank of coefficient array c. 
%                K - length of overlapping blocks
%                mu - scaled Lagrangian step size parameter
%                O - overlap between consecutive blocks. (default = 50%)
%                Nit - number of iterations

defaults = struct( ...
    'mcsleepCalculateCost', ...
    getRules(true, ...
    {'logical'}, {}, ... 
    'If true, calculates the cost function.'), ...
    'mcsleepFilterOrder', ...
    getRules(4, ...
    {'numeric'}, {'positive'}, ... 
    'Butterworth filter order for thresholding.'), ...
    'mcsleepK', ...
    getRules(200, ...
    {'numeric'}, {'positive'}, ... 
    'Length of overlapping blocks in frames.'), ...
    'mcsleepLambda0', ...
    getRules(0.3, ...
    {'numeric'}, {'nonnegative'}, ... 
    'Sparsity regularization parameter for transient signal.'), ...
    'mcsleepLambda1', ...
    getRules(6.5, ...
    {'numeric'}, {'nonnegative'}, ... 
    'Sparsity regularization parameter tries range for derivative of transient signal.'), ...
    'mcsleepLambda2s', ...
    getRules(20:2:50, ...
    {'numeric'}, {'nonnegative'}, ... 
    'Rank of coefficient array c.'), ...
    'mcsleepLambda2Display', ...
    getRules([25, 35, 45], ...
    {'numeric'}, {'nonnegative'}, ... 
    'Default lambda2s to be displayed on performance curves.'), ...
    'mcsleepMu', ...
    getRules(0.5, ...
    {'numeric'}, {'nonnegative'}, ... 
    'Scaled Lagrangian step size parameter.'), ...
    'mcsleepNit', ...
    getRules(80, ...
    {'numeric'}, {'positive'}, ... 
    'Number of iterations.'), ...
    'mcsleepO', ...
    getRules(100, ...
    {'numeric'}, {'positive'}, ... 
    'Overlap between consecutive blocks in frames.'), ...
    'mcsleepSpindleFrequencyRange', ...
    getRules([11, 17], ...
    {'numeric'}, {'row', 'positive'}, ... 
    'Two-element row vector giving allowed spindle frequencies.'), ...
    'mcsleepThresholds', ...
    getRules(0.5:0.2:3, ...
    {'numeric'}, {'nonnegative'}, ... 
    'Threshold range for truncating.'), ...
    'mcsleepThresholdDisplay', ...
    getRules([0.5, 1.8, 3.0], ...
    {'numeric'}, {'nonnegative'}, ... 
    'Default thresholds to be displayed on performance curves.') ...
    );
end

function s = getRules(value, classes, attributes, description)
% Construct the default structure
s = struct('value', [], 'classes', [], ...
    'attributes', [], 'description', []);
s.value = value;
s.classes = classes;
s.attributes = attributes;
s.description = description;
end