function defaults = getGeneralDefaults()
% Returns the defaults for spindle detection
%
% Parameters:
%
%     defaults     a structure with the parameters for the default types
%                  in the form of a structure that has fields
%                     value: default value
%                     classes:   classes that the parameter belongs to
%                     attributes:  attributes of the parameter
%                     description: description of parameter
%

defaults = struct( ...
    'algorithm', ...
    getRules('spindler', ...
    {'char'}, {}, ... 
    'String indicating the algorithm.'), ...
    'epochLength', ...
    getRules(30, ...
    {'numeric'}, {'positive'}, ... 
    ['Length of an epoch in seconds ' ...
     '(for count confusion and epoched algorithms).']), ...
    'eventOverlapMethod', ...
    getRules('union', {'char'}, {}, ...
    ['How to combine spindle events when they overlap ' ...
    'union (default)uses the union, while largest chooses the longest.']), ...
    'figureClose', ...
    getRules(true, ...
    {'logical'}, {}, ... 
    'If true, closes the figures after generating.'), ...
    'figureFormats', ...
    getRules({'png'}, ...
    {'cell'}, {}, ... 
    'Cell array specifying formats for saving figures.'), ...
    'methodNames', ...
    getRules({'count', 'hit', 'intersect', 'onset', 'time'}, ...
    {'cell'}, {}, ... 
    'Cell array names of methods for matching events to ground truth.'), ...
    'metricNames', ...
    getRules({'f1', 'f2', 'G', 'precision', 'recall', 'fdr'}, ...
    {'cell'}, {}, ... 
    'Cell array names of metrics to compute parameter curves for.'), ...
    'signalTrimFactor', ...
    getRules(95, ...
    {'numeric'}, {'scalar', 'nonnegative'}, ... 
    'Percentile signal absolute value to use for scaling signal or loss'), ...
    'spindleDuration', ...
    getRules(1.0, ...
    {'numeric'}, {'scalar', 'positive'}, ... 
    'Assumed spindle duration in seconds for computing true negatives.'), ...
    'spindleFrequencyRange', ...
    getRules([6, 13], ...
    {'numeric'}, {'row', 'positive'}, ... 
    'Assumed range of spindle frequencies.'), ...
    'spindleLengthMax', ...
    getRules(3.0, ...
    {'numeric'}, {'scalar', 'positive'}, ... 
    'Maximum spindle length in seconds.'), ...
    'spindleLengthMin', ...
    getRules(0.5, ...
    {'numeric'}, {'scalar', 'positive'}, ... 
    'Minimum spindle length in seconds.'), ...
    'spindleSeparationMin', ...
    getRules(0.5, ...
    {'numeric'}, {'scalar', 'positive'}, ... 
    'Minimum time separating spindles before they are considered distinct.'), ...
    'srateTarget', ...
    getRules(0, ...
    {'numeric'}, {'scalar', 'nonnegative'}, ... 
    ['Target sampling rate for downsampling (usually will do integral ' ...
     'amount). If 0, no downsampling']), ...
    'toleranceIntersect', ...
    getRules(0.2, ...
    {'numeric'}, {'scalar', 'positive'}, ... 
    'Timing tolerance in seconds for intersect method of determining spindle match.'), ...
    'toleranceOnset', ...
    getRules(0.5, ...
    {'numeric'}, {'scalar', 'positive'}, ... 
    'Timing tolerance in seconds for onset method of determining spindle match.'), ...
    'toleranceTiming', ...
    getRules(0.2, ...
    {'numeric'}, {'scalar', 'positive'}, ... 
    'Timing tolerance in seconds on either side for timing method of matching spindles.') ...
    ); 
end

function s = getRules(value, classes, attributes, description)
% Construct the default structure
s = struct('value', [], 'classes', [], ...
    'attributes', [], 'description', []);
s.value = value;
s.classes = classes;
s.attributes = attributes;
s.description = description;
end