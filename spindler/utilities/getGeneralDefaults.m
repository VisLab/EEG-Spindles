function defaults = getGeneralDefaults()
% Returns the defaults for spindle detection
%
% Parameters:
%
%     defaults     a structure with the parameters for the default types
%                  in the form of a structure that has fields
%                     value: default value
%                     classes:   classes that the parameter belongs to
%                     attributes:  attributes of the parameter
%                     description: description of parameter
%

defaults = struct( ...
    'eventOverlapMethod', ...
    getRules('union', {'char'}, {}, ...
    ['How to combine spindle events when they overlap ' ...
    'union (default)uses the union, while largest chooses the longest.']), ...
    'figureClose', ...
    getRules(true, ...
    {'logical'}, {}, ... 
    'If true, closes the figures after generating.'), ...
    'figureFormats', ...
    getRules({'png'}, ...
    {'cell'}, {}, ... 
    'Cell array specifying formats for saving figures.'), ...
    'figureLevels', ...
    getRules('all', ...
    {'char'}, {}, ... 
    'Algorithm specific string indicating which figures to create.'), ...
    'intersectTolerance', ...
    getRules(0.2, ...
    {'numeric'}, {'scalar', 'positive'}, ... 
    'Timing tolerance in seconds for intersect method of determining spindle match.'), ...
    'minSpindleLength', ...
    getRules(0.25, ...
    {'numeric'}, {'scalar', 'positive'}, ... 
    'Minimum spindle length in seconds.'), ...
    'minSpindleSeparation', ...
    getRules(0.25, ...
    {'numeric'}, {'scalar', 'positive'}, ... 
    'Minimum time separating spindles before they are considered distinct.'), ...
    'onsetTolerance', ...
    getRules(0.5, ...
    {'numeric'}, {'scalar', 'positive'}, ... 
    'Timing tolerance in seconds for onset method of determining spindle match.'), ...
    'signalTrimFactor', ...
    getRules(95, ...
    {'numeric'}, {'scalar', 'nonnegative'}, ... 
    'Percentile signal absolute value to use for scaling signal or loss'), ...
    'spindleSecondsDuration', ...
    getRules(1.0, ...
    {'numeric'}, {'scalar', 'positive'}, ... 
    'Assumed spindle duration in seconds for computing true negatives.'), ...
    'srateTarget', ...
    getRules(128, ...
    {'numeric'}, {'scalar', 'positive'}, ... 
    'Target sampling rate for downsampling (usually will do integral amount).'), ...
    'supervisedEventGap', ...
    getRules(0.1, ...
    {'numeric'}, {'scalar', 'nonnegative'}, ... 
    'Time is seconds to leave on end of event after spliting.'), ...
    'supervisedEventRemovalMethod', ...
    getRules('remove', ...
    {'char'}, {}, ... 
    ['Either ''remove'' or ''gap'' indicating how handle events on ' ...
     ' boundary when splitting file']), ...
    'supervisedSplitFraction', ...
    getRules(0.5, ...
    {'numeric'}, {'scalar', 'nonnegative', '<=', 1}, ... 
    'Fraction of data to use for parameter selection in supervised mode.'), ...
    'timingTolerance', ...
    getRules(0.2, ...
    {'numeric'}, {'scalar', 'positive'}, ... 
    'Timing tolerance in seconds on either side for timing method of matching spindles.')...
    ); 
end

function s = getRules(value, classes, attributes, description)
% Construct the default structure
s = struct('value', [], 'classes', [], ...
    'attributes', [], 'description', []);
s.value = value;
s.classes = classes;
s.attributes = attributes;
s.description = description;
end