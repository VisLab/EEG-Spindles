function spindleParameters = ...
             getSpindleParameters(spindles, totalSeconds, theName, outDir)
%% Show behavior of spindle counts as a function of threshold and atoms/sec 
%
%  Parameters:
%     spindles     Spindler structure with results of MP decomposition
%     totalSeconds Total seconds in the dataset
%     theName      String identifying the name of the dataset
%     outDir       Optional argument (if present and non empty, saves a
%                  plot of the parameter selection results in outDir
%     spindleParameters (output) Structure containing results of parameter
%                  selection
%
%  Written by:  Kay Robbins and John La Rocco, UTSA 2017

%% Get the atoms per second and thresholds
spindleParameters = struct('Name', NaN, ...
             'atomsPerSecond', NaN, 'bestAtomsPerSecond', NaN, ...
             'baseThresholds', NaN', 'bestThreshold', NaN, ...
             'stdLimitInd', NaN, 'upperAtomRange', NaN, ...
             'eFractionAverage', NaN, 'eFractMaxInd', NaN, ...
             'spindleSTD', NaN, 'diffSTD', NaN);

atomsPerSecond = unique(cellfun(@double, {spindles.atomsPerSecond}))';
baseThresholds = unique(cellfun(@double, {spindles.baseThreshold}));
numAtoms = length(atomsPerSecond);
numThresholds = length(baseThresholds);
[~, minThreshInd] = min(baseThresholds);
[~, maxThreshInd] = max(baseThresholds);

%% Get the spindle hits and spindle times
spindleHits = cellfun(@double, {spindles.numberSpindles});
spindleHits = reshape(spindleHits, numAtoms, numThresholds);
spindleTime = cellfun(@double, {spindles.spindleTime});
spindleTime = reshape(spindleTime, numAtoms, numThresholds);
spindleHits = spindleHits/totalSeconds;
spindleTime = spindleTime/totalSeconds;

%% Get the Fraction of energy
eFraction = cellfun(@double, {spindles.eFraction});
eFraction = reshape(eFraction, numAtoms, numThresholds);
eFractionAverage = (eFraction(:, minThreshInd) + eFraction(:, maxThreshInd))/2;
eFractionMax = max(eFractionAverage(:));
eFractionAverage = eFractionAverage./eFractionMax;

%% Get the standard deviations and slopes
spindleSTDUnscaled = std(spindleHits, 0, 2);
stdMax = max(spindleSTD(:));

spindleSTD = spindleSTD./stdMax;
spindleSTD(isnan(spindleSTD)) = 0;
diffSTD = diff(spindleSTD)./diff(atomsPerSecond);
diffSTD(isnan(diffSTD)) = 0;
diffSTDMax = max(abs(diffSTD(:)));
diffSTD = diffSTD./diffSTDMax;
stdLimitInd = find(spindleSTD > 0.25, 1, 'first');
%stdLimitInd = find(spindleSTD(1:stdLastInd) < 0.25, 1, 'last');
if isempty(stdLimitInd)
    stdLimitInd = numAtoms;
    
end
upperAtomRange = atomsPerSecond(stdLimitInd);
[~, eFractMaxInd] = max(eFractionAverage(1:stdLimitInd));
bestAtomsPerSecond = atomsPerSecond(eFractMaxInd);

%% Get the ratios and scaled ratios
xTHRatio = spindleTime./spindleHits;
xTHRatio(isnan(xTHRatio)) = 0;
xTHRatioMean = (xTHRatio(:, minThreshInd) + xTHRatio(:, maxThreshInd))/2;
xTHRatioDiv = 1./xTHRatioMean;
xTHRatioDiv(isnan(xTHRatioDiv)) = 0;
xTHRatioScaled = bsxfun(@times, xTHRatio, xTHRatioDiv);
if isempty(stdLimitInd)
    stdLimitInd = length(xTHRatioScaled);
end
averL1THDist = mean(abs(xTHRatioScaled(1:stdLimitInd, :) - 1));
[~, minTHRatioDistInd] = min(averL1THDist);
bestThreshold = baseThresholds(minTHRatioDistInd);

sHitsMean = (spindleHits(:,  minThreshInd) + spindleHits(:, maxThreshInd))/2;
sHitsDiv = 1./sHitsMean;
sHitsDiv(isnan(sHitsDiv)) = 0;
spindleHitsScaled = bsxfun(@times, spindleHits, sHitsDiv);

%% Now save the calculated spindle parameters
spindleParameters.name = theName;
spindleParameters.atomsPerSecond = atomsPerSecond;
spindleParameters.bestAtomsPerSecond = bestAtomsPerSecond;
spindleParameters.baseThresholds = baseThresholds;
spindleParameters.bestThreshold = bestThreshold;
spindleParameters.stdLimitInd = stdLimitInd;
spindleParameters.upperAtomRange = upperAtomRange;
spindleParameters.eFractionAverage = eFractionAverage;
spindleParameters.eFractMaxInd = eFractMaxInd;
spindleParameters.spindleSTD = spindleSTD;
spindleParameters.diffSTD = diffSTD;

%% Determine whether to display the results
if isempty(outDir)
    return;
elseif ~exist(outDir, 'dir')
    mkdir(outDir);
end

%% Show the spindle values for each dataset individually
newColors = [0, 0, 0.8; 0, 0.8, 0; 0.8, 0, 0];
legendStrings = {'SL Centered', ...
                 ['SL at T=' num2str(baseThresholds(1))], ...
                 ['SL at T=' num2str(bestThreshold)], ...
                 ['SL at T=' num2str(baseThresholds(end))]};
theTitle = {[theName ':Average spindle length (SL) vs atoms/second']; ...    
       ['STD range: [' num2str(min(atomsPerSecond)) ',' ...
       num2str(atomsPerSecond(stdLimitInd)) '] ' ...
       'Energy max: ' num2str(atomsPerSecond(eFractMaxInd)) ...
       ' Closest threshold: ' num2str(baseThresholds(minTHRatioDistInd))]};
h1Fig = figure('Name', [theName ':Average spindle length vs atoms/second']);
hold on
plot(atomsPerSecond, xTHRatioMean, 'LineWidth', 3, 'Color', [0, 0, 0], ...
     'LineStyle', '-');
plot(atomsPerSecond, xTHRatio(:, minThreshInd), 'LineWidth', 2, ...
     'Color', newColors(1, :));
plot(atomsPerSecond, xTHRatio(:, minTHRatioDistInd), 'LineWidth', 2, ...
     'Color', newColors(2, :));
plot(atomsPerSecond, xTHRatio(:, maxThreshInd), 'LineWidth', 2, ...
     'Color', newColors(3, :));
 
plot(atomsPerSecond, spindleSTD, 'LineWidth', 3, 'Color', [0.8, 0.8, 0.8]);
plot(atomsPerSecond, eFractionAverage, 'LineWidth', 3, 'Color', [0.6, 0.6, 0.6]);
summaryLegends = {'Hits STD', 'Energy Fract'};
allLegends = [legendStrings, summaryLegends];
legend(allLegends);
xLimits = get(gca, 'XLim');
line(xLimits, [0, 0], 'Color', [0, 0, 0]);
yLimits = get(gca, 'YLim');

ePos = atomsPerSecond(eFractMaxInd);
line([ePos, ePos], yLimits, 'Color', [0.8, 0.8, 0.8]);

line([min(atomsPerSecond), upperAtomRange], [-0.25, -0.25], ...
    'LineWidth', 4, 'Color', [0.4, 0.4, 0.8]);
ylabel('Average spindle length (sec)');
xlabel('Atoms/second');
box on
hold off
title(theTitle, 'Interpreter', 'None');
saveas(h1Fig, [outDir filesep theName '_Params_AverageSpindleLength.png'], 'png');
%close h1

%% Plot the thresholds for selected thresholds 
hitMask = false(numThresholds, 1);
hitMask(1) = true;
hitMask(end) = true;
numberLeft = numThresholds - 2;
numDiv = floor(numberLeft/5);
for j = 1:5
    hitMask(2 + (j - 1)*numDiv) = true;
end
numUsed = sum(hitMask);
hitColors = jet(numUsed);
legendStrings = cell(1, numUsed);
usedThresholds = baseThresholds(hitMask);
for k = 1:numUsed
    legendStrings{k} = ['T_b=' num2str(usedThresholds(k))];
end
theTitle = {[theName ': Center scaled spindle hits for selected thresholds']; ...    
       ['STD range: [' num2str(min(atomsPerSecond)) ',' ...
       num2str(atomsPerSecond(stdLimitInd)) '] ' ]};
h2Fig = figure('Name', [theName ':Center scaled spindle for selected thresholds']);
hold on

usedHits = spindleHitsScaled(:, hitMask);
for k = 1:numUsed
   plot(atomsPerSecond, usedHits(:, k), 'LineWidth', 2, ...
       'Color', hitColors(k, :));
end
plot(atomsPerSecond, sHitsMean./max(sHitsMean), 'LineWidth', 3, 'Color', [0, 0, 0], ...
     'LineStyle', '-');
plot(atomsPerSecond, spindleSTD, 'LineWidth', 3, 'Color', [0.8, 0.8, 0.8]);
summaryLegends = {'Centered hits', 'Hits STD'};
allLegends = [legendStrings, summaryLegends];
legend(allLegends, 'Location', 'EastOutside');
xLimits = get(gca, 'XLim');
line(xLimits, [0, 0], 'Color', [0, 0, 0]);
yLimits = get(gca, 'YLim');

ePos = atomsPerSecond(eFractMaxInd);
line([ePos, ePos], yLimits, 'Color', [0.8, 0.8, 0.8]);
line(xLimits, [1, 1], 'Color', [0, 0, 0]);
line([min(atomsPerSecond), upperAtomRange], [-0.25, -0.25], ...
    'LineWidth', 4, 'Color', [0.4, 0.4, 0.8]);
ylabel('Spindle hits (scaled by mean)');
xlabel('Atoms/second');
box on
hold off
title(theTitle, 'Interpreter', 'None');
saveas(h2Fig, [outDir filesep theName '_Params_ScaledSpindleHits.png'], 'png');
%close h1

%% Spindle hits as a function of threshold
theTitle = {[theName ': Range of spindle hits vs atoms/second']; ...    
       ['STD range: [' num2str(min(atomsPerSecond)) ',' ...
       num2str(atomsPerSecond(stdLimitInd)) '] ' ]};
h3Fig = figure('Name', [theName ':Range of spindle hits vs atoms/second']);
hold on
[ax, h1, h2] = plotyy(atomsPerSecond, sHitsMean, atomsPerSecond, spindleSTD);
theColor = get(h1, 'Color');
plot(ax(1), atomsPerSecond, spindleHits(:, 1), ...
         'LineWidth', 2, 'Color', theColor, 'LineStyle', '--');
plot(ax(1), atomsPerSecond, spindleHits(:, end), ...
         'LineWidth', 2, 'Color', theColor, 'LineStyle', ':');
hleg = legend(ax(1), 'T_b = center', 'T_b = 0', 'T_b=1', 'Location', 'NorthWest');
title(hleg, 'Spindle hits')
set(h1, 'LineWidth', 3);
set(h2, 'LineWidth', 3);
ylabel(ax(1), 'Number of spindles (centered)');
ylabel(ax(2), 'STD of number spindles wrt threshold');
xLimits = get(ax(2), 'XLim');
yPos = 0.25*max(spindleSTD);
line(ax(2), xLimits, [yPos, yPos], 'LineWidth', 1, 'Color', [0, 0, 0]);

xlabel(ax(1), 'Atoms/second');
xlabel(ax(2), '');
box on
hold off
title(theTitle, 'Interpreter', 'None');
saveas(h3Fig, [outDir filesep theName '_Params_CenteredSpindleHits.png'], 'png');
%close h1
